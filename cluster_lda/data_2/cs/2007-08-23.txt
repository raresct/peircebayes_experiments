0708.3127	cs.IT math.IT	Question on Conditional Entropy	The problems of conditional entropy 's definition and the formula to compute conditional entropy are analyzed from various perspectives , and the corrected computing formula is presented . Examples are given to prove the conclusion that conditional entropy never be increased is not absolute , thus the representation that information is to decrease uncertainty in the definition of information is not absolutely correct .
0708.3166	cs.NI	Web Server Benchmark Application WiiBench using Erlang/OTP R11 and Fedora-Core Linux 5.0	As the web grows and the amount of traffics on the web server increase , problems related to performance begin to appear . Some of the problems , such as the number of users that can access the server simultaneously , the number of requests that can be handled by the server per second ( requests per second ) to bandwidth consumption and hardware utilization like memories and CPU . To give better quality of service ( \textbf { \textit { QoS } } ) , web hosting providers and also the system administrators and network administrators who manage the server need a benchmark application to measure the capabilities of their servers . Later , the application intends to work under Linux/Unix -- like platforms and built using Erlang/OTP R11 as a concurrent oriented language under Fedora Core Linux 5.0 . \textbf { \textit { WiiBench } } is divided into two main parts , the controller section and the launcher section . Controller is the core of the application . It has several duties , such as read the benchmark scenario file , configure the program based on the scenario , initialize the launcher section , gather the benchmark results from local and remote Erlang node where the launcher runs and write them in a log file ( later the log file will be used to generate a report page for the sysadmin ) . Controller also has function as a timer which act as timing for user inters arrival to the server . Launcher generates a number of users based on the scenario , initialize them and start the benchmark by sending requests to the web server . The clients also gather the benchmark result and send them to the controller .
0708.3220	cs.MA cs.NI math.OC	Optimal strategies in the average consensus problem	We prove that for a set of communicating agents to compute the average of their initial positions ( average consensus problem ) , the optimal topology of communication is given by a de Bruijn 's graph . Consensus is then reached in a finitely many steps . A more general family of strategies , constructed by block Kronecker products , is investigated and compared to Cayley strategies .
0708.3224	cs.DM math.CO	The Frobenius Problem in a Free Monoid	The classical Frobenius problem is to compute the largest number g not representable as a non-negative integer linear combination of non-negative integers x_1 , x_2 , ... , x_k , where gcd ( x_1 , x_2 , ... , x_k ) = 1 . In this paper we consider generalizations of the Frobenius problem to the noncommutative setting of a free monoid . Unlike the commutative case , where the bound on g is quadratic , we are able to show exponential or subexponential behavior for an analogue of g , depending on the particular measure chosen .
0708.3226	cs.LG cs.CC	A Dichotomy Theorem for General Minimum Cost Homomorphism Problem	In the constraint satisfaction problem ( $ CSP $ ) , the aim is to find an assignment of values to a set of variables subject to specified constraints . In the minimum cost homomorphism problem ( $ MinHom $ ) , one is additionally given weights $ c_ { va } $ for every variable $ v $ and value $ a $ , and the aim is to find an assignment $ f $ to the variables that minimizes $ \sum_ { v } c_ { vf ( v ) } $ . Let $ MinHom ( \Gamma ) $ denote the $ MinHom $ problem parameterized by the set of predicates allowed for constraints . $ MinHom ( \Gamma ) $ is related to many well-studied combinatorial optimization problems , and concrete applications can be found in , for instance , defence logistics and machine learning . We show that $ MinHom ( \Gamma ) $ can be studied by using algebraic methods similar to those used for CSPs . With the aid of algebraic techniques , we classify the computational complexity of $ MinHom ( \Gamma ) $ for all choices of $ \Gamma $ . Our result settles a general dichotomy conjecture previously resolved only for certain classes of directed graphs , [ Gutin , Hell , Rafiey , Yeo , European J. of Combinatorics , 2008 ] .
0708.3230	cs.CR cs.CY	Can Alice and Bob be random : a study on human playing zero knowledge protocols	The research described in this abstract was initiated by discussions between the author and Giovanni Di Crescenzo in Barcelona in early 2004 . It was during Advanced Course on Contemporary Cryptology that Di Crescenzo gave a course on zero knowledge protocols ( ZKP ) , see [ 1 ] . After that course we started to play with unorthodox ideas for breaking ZKP , especially one based on graph 3-coloring . It was chosen for investigation because it is being considered as a '' benchmark '' ZKP , see [ 2 ] , [ 3 ] . At this point we briefly recall such a protocol 's description .
0708.3259	cs.DS cs.DB cs.IR	Fast evaluation of union-intersection expressions	We show how to represent sets in a linear space data structure such that expressions involving unions and intersections of sets can be computed in a worst-case efficient way . This problem has applications in e.g . information retrieval and database systems . We mainly consider the RAM model of computation , and sets of machine words , but also state our results in the I/O model . On a RAM with word size $ w $ , a special case of our result is that the intersection of $ m $ ( preprocessed ) sets , containing $ n $ elements in total , can be computed in expected time $ O ( n ( \log w ) ^2 / w + km ) $ , where $ k $ is the number of elements in the intersection . If the first of the two terms dominates , this is a factor $ w^ { 1-o ( 1 ) } $ faster than the standard solution of merging sorted lists . We show a cell probe lower bound of time $ \Omega ( n/ ( w m \log m ) + ( 1-\tfrac { \log k } { w } ) k ) $ , meaning that our upper bound is nearly optimal for small $ m $ . Our algorithm uses a novel combination of approximate set representations and word-level parallelism .
