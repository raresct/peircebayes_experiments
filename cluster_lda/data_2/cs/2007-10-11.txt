0710.2156	cs.DB	Collaborative OLAP with Tag Clouds : Web 2.0 OLAP Formalism and Experimental Evaluation	Increasingly , business projects are ephemeral . New Business Intelligence tools must support ad-lib data sources and quick perusal . Meanwhile , tag clouds are a popular community-driven visualization technique . Hence , we investigate tag-cloud views with support for OLAP operations such as roll-ups , slices , dices , clustering , and drill-downs . As a case study , we implemented an application where users can upload data and immediately navigate through its ad hoc dimensions . To support social networking , views can be easily shared and embedded in other Web sites . Algorithmically , our tag-cloud views are approximate range top-k queries over spontaneous data cubes . We present experimental evidence that iceberg cuboids provide adequate online approximations . We benchmark several browser-oblivious tag-cloud layout optimizations .
0710.2227	cs.NE cs.AI	A System for Predicting Subcellular Localization of Yeast Genome Using Neural Network	The subcellular location of a protein can provide valuable information about its function . With the rapid increase of sequenced genomic data , the need for an automated and accurate tool to predict subcellular localization becomes increasingly important . Many efforts have been made to predict protein subcellular localization . This paper aims to merge the artificial neural networks and bioinformatics to predict the location of protein in yeast genome . We introduce a new subcellular prediction method based on a backpropagation neural network . The results show that the prediction within an error limit of 5 to 10 percentage can be achieved with the system .
0710.2231	cs.CV	Comparison and Combination of State-of-the-art Techniques for Handwritten Character Recognition : Topping the MNIST Benchmark	Although the recognition of isolated handwritten digits has been a research topic for many years , it continues to be of interest for the research community and for commercial applications . We show that despite the maturity of the field , different approaches still deliver results that vary enough to allow improvements by using their combination . We do so by choosing four well-motivated state-of-the-art recognition systems for which results on the standard MNIST benchmark are available . When comparing the errors made , we observe that the errors made differ between all four systems , suggesting the use of classifier combination . We then determine the error rate of a hypothetical system that combines the output of the four systems . The result obtained in this manner is an error rate of 0.35 % on the MNIST data , the best result published so far . We furthermore discuss the statistical significance of the combined result and of the results of the individual classifiers .
0710.2284	cs.DC cs.GT	Symmetric and Synchronous Communication in Peer-to-Peer Networks	Motivated by distributed implementations of game-theoretical algorithms , we study symmetric process systems and the problem of attaining common knowledge between processes . We formalize our setting by defining a notion of peer-to-peer networks ( * ) and appropriate symmetry concepts in the context of Communicating Sequential Processes ( CSP ) , due to the common knowledge creating effects of its synchronous communication primitives . We then prove that CSP with input and output guards makes common knowledge in symmetric peer-to-peer networks possible , but not the restricted version which disallows output statements in guards and is commonly implemented . ( * ) Please note that we are not dealing with fashionable incarnations such as file-sharing networks , but merely use this name for a mathematical notion of a network consisting of directly connected peers `` treated on an equal footing '' , i.e . not having a client-server structure or otherwise pre-determined roles . )
0710.2358	cs.PL cs.HC	Success and failure of programming environments - report on the design and use of a graphic abstract syntax tree editor	The STAPLE project investigated ( at the end of the eighties ) , a persistent architecture for functional programming . Work has been done in two directions : the development of a programming environment for a functional language within a persistent system and an experiment on transferring the expertise of functional prototyping into industry . This paper is a report on the first activity . The first section gives a general description of Absynte - the abstract syntax tree editor developed within the Project . Following sections make an attempt at measuring the effectiveness of such an editor and discuss the problems raised by structured syntax editing - specially environments based on abstract syntax trees .
